/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Empty as PrismaEmpty } from "@prisma/client";

export class EmptyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.EmptyCountArgs, "select">): Promise<number> {
    return this.prisma.empty.count(args);
  }

  async empties<T extends Prisma.EmptyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmptyFindManyArgs>
  ): Promise<PrismaEmpty[]> {
    return this.prisma.empty.findMany<Prisma.EmptyFindManyArgs>(args);
  }
  async empty<T extends Prisma.EmptyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmptyFindUniqueArgs>
  ): Promise<PrismaEmpty | null> {
    return this.prisma.empty.findUnique(args);
  }
  async createEmpty<T extends Prisma.EmptyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmptyCreateArgs>
  ): Promise<PrismaEmpty> {
    return this.prisma.empty.create<T>(args);
  }
  async updateEmpty<T extends Prisma.EmptyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmptyUpdateArgs>
  ): Promise<PrismaEmpty> {
    return this.prisma.empty.update<T>(args);
  }
  async deleteEmpty<T extends Prisma.EmptyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmptyDeleteArgs>
  ): Promise<PrismaEmpty> {
    return this.prisma.empty.delete(args);
  }
}
