/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Profile as PrismaProfile,
  User as PrismaUser,
} from "@prisma/client";

export class ProfileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProfileCountArgs, "select">): Promise<number> {
    return this.prisma.profile.count(args);
  }

  async profiles<T extends Prisma.ProfileFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProfileFindManyArgs>
  ): Promise<PrismaProfile[]> {
    return this.prisma.profile.findMany<Prisma.ProfileFindManyArgs>(args);
  }
  async profile<T extends Prisma.ProfileFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProfileFindUniqueArgs>
  ): Promise<PrismaProfile | null> {
    return this.prisma.profile.findUnique(args);
  }
  async createProfile<T extends Prisma.ProfileCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProfileCreateArgs>
  ): Promise<PrismaProfile> {
    return this.prisma.profile.create<T>(args);
  }
  async updateProfile<T extends Prisma.ProfileUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProfileUpdateArgs>
  ): Promise<PrismaProfile> {
    return this.prisma.profile.update<T>(args);
  }
  async deleteProfile<T extends Prisma.ProfileDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProfileDeleteArgs>
  ): Promise<PrismaProfile> {
    return this.prisma.profile.delete(args);
  }

  async getUser(parentId: number): Promise<PrismaUser | null> {
    return this.prisma.profile
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
